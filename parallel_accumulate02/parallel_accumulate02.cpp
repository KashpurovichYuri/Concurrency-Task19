#include <algorithm>
#include <future>
#include <iostream>
#include <numeric>
#include <thread>
#include <vector>

#include "timer/timer.cpp"

class Threads_Guard
{
public:

	explicit Threads_Guard(std::vector < std::thread > & threads) :
		m_threads(threads)
	{}

	Threads_Guard			(Threads_Guard const&) = delete;

	Threads_Guard& operator=(Threads_Guard const&) = delete;

	~Threads_Guard() noexcept
	{
		try
		{
			for (std::size_t i = 0; i < m_threads.size(); ++i)
			{
				if (m_threads[i].joinable())
				{
					m_threads[i].join();
				}
			}
		}
		catch (...)
		{
			// std::abort();
		}
	}

private:

	std::vector < std::thread > & m_threads;
};

template < typename Iterator, typename T >
struct accumulate_block
{
	T operator()(Iterator first, Iterator last)
	{
		return std::accumulate(first, last, T());
	}
};

template < typename Iterator, typename T >
T parallel_accumulate(Iterator first, Iterator last, T init,
	const std::size_t num_threads, double & elem)
{
	Timer time {"starting sequent calculations...", std::cout};

	const std::size_t length = std::distance(first, last);

	if (!length)
		return init;

	const std::size_t block_size = std::max(1ull, length / num_threads);

	std::vector < std::future < T > > futures(num_threads - 1);
	std::vector < std::thread >		  threads(num_threads - 1);

	Threads_Guard guard(threads);

	Iterator block_start = first;

	for (std::size_t i = 0; i < (num_threads - 1); ++i)
	{
		Iterator block_end = block_start;
		std::advance(block_end, block_size);

		std::packaged_task < T(Iterator, Iterator) > task{
			accumulate_block < Iterator, T >() };

		futures[i] = task.get_future();
		threads[i] = std::thread(std::move(task), block_start, block_end);

		block_start = block_end;
	}

	T last_result = accumulate_block < Iterator, T > ()(block_start, last);

	T result = init;

	for (std::size_t i = 0; i < (num_threads - 1); ++i)
	{
		result += futures[i].get();
	}

	result += last_result;

	time.stop();
	elem = time.get_time();

	return result;
}

int main()
{
	std::vector < int > v(1000000);
	std::iota(std::begin(v), std::end(v), 1);

	std::vector < double > seria(2);
	std::vector < double > results;

	const std::size_t N = 100;
	for (auto num_threads = 1; num_threads <= N; ++num_threads)
	{
		for (auto& elem : seria)
			parallel_accumulate(std::begin(v), std::end(v), 0, num_threads, elem);
		results.push_back( std::accumulate(std::begin(seria), std::end(seria), 0.0) / seria.size() );
	}

	for (const auto& result : results)
		std::cout << result << " ";

	system("pause");

	return EXIT_SUCCESS;
}

/*
RESULTS:
----------------------------------
v.m_size == 100000, t_seq = 0.004686
N: 1..100
t:
----------------------------------
v.m_size == 1000000, t_seq ab. 0.019452
N: 1..100, step = 1
t: 0.018210 0.012424 0.014526 0.012994 0.013214 0.013245 0.013619 0.013177 0.013511 0.014120 0.013664 0.013776 0.014311 0.014215 0.014469 0.015097 0.015634 0.015583 0.015457 0.015460 0.023317 0.020742 0.016685 0.016499 0.020558 0.019198 0.019240 0.017772 0.017889 0.018015 0.018229 0.019966 0.018446 0.018370 0.020389 0.019110 0.020894 0.018391 0.019160 0.019140 0.020874 0.021464 0.019686 0.019623 0.022763 0.022412 0.022045 0.020553 0.019707 0.020772 0.020857 0.022124 0.020269 0.020469 0.020557 0.021169 0.020688 0.023449 0.023165 0.021587 0.023619 0.023425 0.024292 0.022103 0.022255 0.024200 0.025906 0.024404 0.022742 0.023343 0.023270 0.023071 0.025438 0.024250 0.025930 0.025272 0.026723 0.024240 0.024122 0.026781 0.027625 0.025318 0.027490 0.027585 0.027140 0.027459 0.030242 0.025562 0.032013 0.026134 0.027738 0.026620 0.025825 0.028143 0.026142 0.030496 0.030141 0.030686 0.027363 0.028780
N: 1..1000, step = 10
t: 0.018396 0.013772 0.017703 0.018000 0.019591 0.020271 0.023365 0.023359 0.024801 0.030001 0.031774 0.027978 0.029053 0.032750 0.034458 0.033914 0.034961 0.037217 0.038143 0.043181 0.040706 0.042390 0.043651 0.045346 0.050652 0.049875 0.049007 0.051324 0.052457 0.054328 0.059593 0.057822 0.059637 0.060596 0.061384 0.066880 0.064403 0.065378 0.069572 0.068609 0.069715 0.074724 0.072708 0.073127 0.076986 0.078591 0.079460 0.078786 0.082703 0.081695 0.082920 0.086147 0.085573 0.095486 0.104689 0.106084 0.117961 0.099995 0.098179 0.094159 0.097141 0.095676 0.097545 0.098651 0.101689 0.107609 0.116721 0.202934 0.187267 0.137899 0.109002 0.115548 0.119459 0.128576 0.127451 0.123652 0.125006 0.123377 0.127954 0.130567 0.139080 0.144715 0.132663 0.149153 0.131370 0.129818 0.141172 0.135531 0.135437 0.135764 0.136726 0.140932 0.140472 0.142088 0.144682 0.143782 0.146811 0.151745 0.150156 0.150797
N: 1000..10000, step = 1000
t: 0.152194 0.311825 0.433833 0.579391 0.688991 0.831439 0.966032 1.099431 1.231407 1.525080
N = 50000
t: 6.944761
N = 100000
t: 13.823384
----------------------------------
v.m_size == 10000000, t_seq ab. 0.154107
N: 1..100, step = 1
t: 0.148533 0.080858 0.091845 0.082390 0.094775 0.081762 0.091155 0.082436 0.089623 0.083490 0.088375 0.083211 0.088068 0.083700 0.087956 0.084464 0.087572 0.084140 0.092883 0.084718 0.087719 0.085658 0.087390 0.091670 0.087742 0.085740 0.088520 0.086532 0.087515 0.085942 0.087505 0.086221 0.088349 0.086697 0.087812 0.088182 0.088122 0.087794 0.088165 0.087537 0.088039 0.087756 0.090149 0.088065 0.088602 0.087917 0.088556 0.088344 0.089731 0.090362 0.091331 0.093799 0.091690 0.091146 0.091659 0.091223 0.092970 0.092774 0.097722 0.092126 0.091977 0.092246 0.092518 0.092300 0.093506 0.092822 0.093819 0.093168 0.093235 0.094273 0.093696 0.093722 0.093962 0.094138 0.094208 0.094886 0.094362 0.094587 0.094839 0.095026 0.095311 0.100184 0.152076 0.134727 0.121528 0.093480 0.094569 0.095877 0.096468 0.096930 0.096409 0.102489 0.097273 0.109720 0.097511 0.096960 0.096965 0.097144 0.097236
N: 100..1000, step = 10
t: 0.096466 0.096847 0.098301 0.100218 0.101071 0.109654 0.104169 0.105820 0.106826 0.109360 0.106756 0.108786 0.112812 0.113154 0.113487 0.114735 0.115984 0.117289 0.118695 0.120170 0.122992 0.123198 0.131204 0.125857 0.128135 0.128988 0.130402 0.131886 0.133893 0.138457 0.136216 0.138289 0.139004 0.140615 0.142166 0.143878 0.146822 0.146321 0.148452 0.150063 0.152716 0.154450 0.155045 0.154862 0.163351 0.157695 0.161575 0.160932 0.165357 0.164821 0.180170 0.167643 0.168861 0.176778 0.171140 0.245349 0.185409 0.175357 0.183342 0.178765 0.203607 0.181435 0.192889 0.184737 0.188284 0.188500 0.188100 0.189841 0.191195 0.191258 0.193320 0.195218 0.197662 0.198676 0.200101 0.200573 0.216363 0.227172 0.214645 0.246458 0.343903 0.209266 0.207635 0.209426 0.210337 0.212004 0.213434 0.216812 0.217867 0.221684 0.221524 0.222121 0.227756 0.223084 0.223654 0.224132 0.224796 0.225212 0.226080
N: 2000..10000, step = 1000
t: 0.363040 0.510126 0.648775 0.783911 0.909282 1.046637 1.193911 1.329904 1.478723
N = 50000
t: 7.095695
N = 100000
t: 14.010637
----------------------------------
*/